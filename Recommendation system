import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# -------------------------------
# 1. Sample Movie Dataset
# -------------------------------
movies = pd.DataFrame({
    'title': [
        'The Matrix', 'The Godfather', 'Toy Story',
        'Pulp Fiction', 'Avengers: Endgame', 'Finding Nemo'
    ],
    'genres': [
        'Action Sci-Fi', 'Crime Drama', 'Animation Comedy Family',
        'Crime Drama', 'Action Adventure Sci-Fi', 'Animation Adventure Comedy'
    ]
})

# -------------------------------
# 2. TF-IDF Vectorization on Genres
# -------------------------------
vectorizer = TfidfVectorizer()
genre_matrix = vectorizer.fit_transform(movies['genres'])

# -------------------------------
# 3. Compute Cosine Similarity
# -------------------------------
similarity_matrix = cosine_similarity(genre_matrix)

# -------------------------------
# 4. Recommendation Function
# -------------------------------
def recommend(movie_title, top_n=3):
    if movie_title not in movies['title'].values:
        return "❌ Movie not found in the database."

    index = movies[movies['title'] == movie_title].index[0]
    similarity_scores = list(enumerate(similarity_matrix[index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)

    top_movies = [movies['title'][i[0]] for i in similarity_scores[1:top_n+1]]
    return top_movies

# -------------------------------
# 5. Try it out!
# -------------------------------
movie_input = input("Enter a movie title: ")
recommendations = recommend(movie_input)

print("\nRecommended movies:")
if isinstance(recommendations, list):
    for title in recommendations:
        print("✅", title)
else:
    print(recommendations)
